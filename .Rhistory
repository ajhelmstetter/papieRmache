library(papieRmache)
formatR::tidy_dir('R')
devtools::load_all(".")
devtools::load_all(".")
warnings()
devtools::load_all(".")
library(paperreadeR)
library(papieRmache)
clean_text(in_dir = "./data/test_pdfs/")
clean_text(in_dir = "./data/test_pdfs/")
in_dir
?list.files
clean_text(in_dir = "./data/test_pdfs/")
library(papieRmache)
in_dir = "./data/test_pdfs/"
list.files(path = in_dir ,pattern = ".txt$")
library(papieRmache)
list.files(path = in_dir ,pattern = ".txt$")
clean_text(in_dir = "./data/test_pdfs/")
library(papieRmache)
clean_text(in_dir = "./data/test_pdfs/")
clean_text(in_dir = "./data/test_pdfs/")
library(papieRmache)
library(papieRmache)
clean_text(in_dir = "./data/test_pdfs/")
library(papieRmache)
clean_text(in_dir = "./data/test_pdfs/")
clean_text(in_dir = "./data/test_pdfs/")
1:length(data_files)
readtext(data_files[j])
j<-1
readtext(data_files[j])
data_files[j]
library(papieRmache)
clean_text(in_dir = "./data/test_pdfs/")
library(papieRmache)
clean_text(in_dir = "./data/test_pdfs/")
library(papieRmache)
library(papieRmache)
clean_text(in_dir = "./data/test_pdfs/")
library(papieRmache)
clean_text(in_dir = "./data/test_pdfs/")
clean_text(in_dir = "./data/test_pdfs/")
library(papieRmache)
clean_text(in_dir = "./data/test_pdfs/")
clean_text(in_dir = "./data/test_pdfs/")
readtext(data_files[j])
j<-1
readtext(data_files[j])
?readtext
readtext(data_files[j])
data_files[j]
str(readtext(data_files[j])
)
str(data_files[j])
library(papieRmache)
clean_text(in_dir = "./data/test_pdfs/")
devtools::load_all(".")
clean_text(in_dir = "./data/test_pdfs/")
clean_text(in_dir = "./data/test_pdfs/")
clean_text(in_dir = "./data/test_pdfs/")
load("~/Dropbox/projects/AJH_DiveRS/sse_review/papieRmache/cleaned_text.Rdata")
load("~/Dropbox/projects/AJH_DiveRS/sse_review/papieRmache/cleaned_text.Rdata")
devtools::load_all(".")
load("~/Dropbox/projects/AJH_DiveRS/sse_review/papieRmache/cleaned_text.Rdata")
library(papieRmache)
clean_text(in_dir = "./data/test_pdfs/")
save.image("cleaned_text.Rdata")
saveRDS("cleaned_text.RDS")
saveRDS(cleaned_text,"cleaned_text.RDS")
cleaned_text <- readRDS("~/Dropbox/projects/AJH_DiveRS/sse_review/papieRmache/cleaned_text.RDS")
Q
Q
Q
Q
Q
Q
Q
library(papieRmache)
clean_text(in_dir = "./data/test_pdfs/")
cleaned_text <- readRDS("~/Dropbox/projects/AJH_DiveRS/sse_review/papieRmache/cleaned_text.RDS")
cleaned_text
library("devtools")
install.packages("devtools")
library("devtools")
install_deps("papieRmache")
install.packages('corpus’, ‘data.table’, ‘ggplot2’, ‘pdftools’, ‘qdap’, ‘qdapDictionaries’, ‘qdapRegex’, ‘qdapTools’, ‘quanteda’, ‘RColorBrewer’, ‘readtext’, ‘reshape2’, ‘tm’ )
install.packages(‘corpus’, ‘data.table’, ‘ggplot2’, ‘pdftools’, ‘qdap’, ‘qdapDictionaries’, ‘qdapRegex’, ‘qdapTools’, ‘quanteda’, ‘RColorBrewer’, ‘readtext’, ‘reshape2’, ‘tm’ are not available for package ‘papieRmache’)
install.packages('corpus’, 'data.table’, 'ggplot2’, 'pdftools’, 'qdap’, 'qdapDictionaries’, 'qdapRegex’, 'qdapTools’, 'quanteda’, 'RColorBrewer’, 'readtext’, 'reshape2’, 'tm’)
install.packages('corpus', 'data.table', 'ggplot2', 'pdftools', 'qdap', 'qdapDictionaries', 'qdapRegex', 'qdapTools', 'quanteda', 'RColorBrewer', 'readtext', 'reshape2', 'tm')
install.packages('corpus')
install.packages('data.table')
install.packages('ggplot2')
install.packages('pdftools')
install.packages('qdap')
install.packages('qdapDictionaries')
install.packages('qdapRegex')
install.packages('qdapTools')
install.packages('quanteda')
install.packages('readtext')
install.packages('reshape2')
install.packages('tm')
install.packages("quanteda")
library(papieRmache)
clean_text(in_dir = "./data/test_pdfs/")
library(papieRmache)
clean_text(in_dir = "./data/test_pdfs/")
clean.text(in_dir = "./data/test_pdfs/")
generate.term.dataset(cleaned_text = cleaned_text, in_dir = "data/test_pdfs/", keywords = "bisse")
generate.term.dataset(cleaned_text = cleaned_text, in_dir = "./data/test_pdfs/", keywords = "bisse")
d
Q
generate.term.dataset(cleaned_text = cleaned_text, in_dir = "./data/test_pdfs/", keywords = "data/models.txt")
cleaned_text<-clean.text(in_dir = "./data/test_pdfs/")
tds<-generate.term.dataset(cleaned_text = cleaned_text, in_dir = "./data/test_pdfs/", keywords = "data/models.txt")
semi.auto(in_dir = "./data/test_pdfs/",n = 3,cleaned_text = cleaned_text,keywords = "data/models.txt",sorted_words = tds,out_file = "out.RDS")
tds
semi.auto(in_dir = "./data/test_pdfs/",n = 3,cleaned_text = cleaned_text,keywords = "data/models.txt",sorted_words = tds,out_file = out.RDS)
semi.auto(in_dir = "./data/test_pdfs/",n = 3,cleaned_text = cleaned_text,keywords = "data/models.txt",sorted_words = tds,out_file = out.RDS)
foo<-read.table("data/models.txt")
foo
kw<-foo$V1
tds<-generate.term.dataset(cleaned_text = cleaned_text, in_dir = "./data/test_pdfs/", keywords = kw)
paste(kw)
read.table(paste(kw))
tds<-generate.term.dataset(cleaned_text = cleaned_text, in_dir = "./data/test_pdfs/", keywords = "data/models.txt")
semi.auto(in_dir = "./data/test_pdfs/",n = 3,cleaned_text = cleaned_text,keywords = "models.txt",sorted_words = tds,out_file = out.RDS)
semi.auto(in_dir = "./data/test_pdfs/",n = 3,cleaned_text = cleaned_text,keywords = "models.txt",sorted_words = tds,out_file = "out")
load("out.RDS_tax.rds")
sa<-semi.auto(in_dir = "./data/test_pdfs/",n = 3,cleaned_text = cleaned_text,keywords = "models.txt",sorted_words = tds,out_file = "out")
sa
str(sa)
data.frame(sa)
data.frame(sa)
sa
sa[1]
tds<-generate.term.dataset(cleaned_text = cleaned_text, in_dir = "./data/test_pdfs/", keywords = kw)
tds<-generate.term.dataset(cleaned_text = cleaned_text, in_dir = "./data/test_pdfs/", keywords = kw)
library(papieRmache)
cleaned_text<-clean.text(in_dir = "./data/test_pdfs/")
tds<-generate.term.dataset(cleaned_text = cleaned_text, in_dir = "./data/test_pdfs/", keywords = kw)
kw
tds<-generate.term.dataset(cleaned_text = cleaned_text, in_dir = "./data/test_pdfs/", keywords = kw)
library(papieRmache)
cleaned_text<-clean.text(in_dir = "./data/test_pdfs/")
tds<-generate.term.dataset(cleaned_text = cleaned_text, in_dir = "./data/test_pdfs/", keywords = kw)
sa<-semi.auto(in_dir = "./data/test_pdfs/",n = 3,cleaned_text = cleaned_text,keywords = kw,sorted_words = tds,out_file = "out")
Q
rm(list = ls())
setwd("~/Dropbox/projects/AJH_AFRODYN/amova/")
library(raster)
library(maps)
library(GSIF)
library(assigner)
library(radiator)
library("adegenet")
library(codep)
library(adespatial)
library(car)
library(vcfR)
library(elevatr)
library(distancetocoast)
library("rnaturalearth")
library("rnaturalearthdata")
library("hierfstat")
library("pegas")
library(poppr)
library(scales)
library(MASS)
sp <- c("anni", "anon",  "green", "mona", "podoa", "podob", "sclero")
locs_list <- list()
bin_list <- list()
#
#clim-based refugia
#
load("../refugia/refugia_amova.Rdata")
#
#enm-based refugia
#
enm_stab <-
raster(paste("../enm/stable_areas/", sp[i], "_mel_tss.tif", sep = ""))
#
#maley refugia
#
#create empty raster
r <- raster(ncol = 5000, nrow = 5000)
crs(r) = '+proj=utm +zone=12 +datum=WGS84'
e <- extent(0, 30,-10, 10)
r <- crop(r, e)
#approximate midpoints of refugia
xy <- c(10, 5)
xy <- rbind(xy, c(11, 3))
xy <- rbind(xy, c(10.5, 1))
xy <- rbind(xy, c(10.5,-2))
xy <- rbind(xy, c(11.5,-1.5))
xy <- rbind(xy, c(12.5,-4.5))
#world shape for mask
world <- ne_countries(scale = "medium", returnclass = "sf")
#calculate distance from points for each cell
d2 <- distanceFromPoints(r, xy)
lf <- list.files("../refugia/locs")
lff <- list.files("../refugia/locs", full.names = T)
rd <- list.files("../refugia/data", full.names = T)
for (i in 1:length(lff)) {
locs <- read.csv(lff[i])
locs <- locs[, c("index", "long", "lat")]
locs <- locs[order(locs$index),]
locs$sp <- rep(sp[i], length(locs$long))
locs_list[[i]] <- locs
}
###
# Read in data
###
setwd("~/Dropbox/projects/AJH_AFRODYN/amova")
load("vcfs.Rdata")
vcfs <-
list(anni_vcf,
anon_vcf,
green_vcf,
fries_vcf,
podo_a_vcf,
podo_b_vcf,
sclero_vcf)
names(vcfs) <-
c("anni", "anon",  "green", "mona", "podo_a", "podo_b", "sclero")
list_locs <- list.files("../refugia/locs/", full.names = T)
list_locs
###
# Clim-based refugia
###
list_amova <- list()
list_amova_signif <- list()
list_rand_amova <- list()
list_rand_amova_signif <- list()
#check whether names of genind are in right order compared to location tables
pdf("refugia_clim.pdf")
par(mfrow = c(1, 2))
for (i in 1:length(vcfs)) {
#pdf(paste(names(vcfs)[i], "_refugia_clim.pdf", sep = ""))
par(mfrow = c(1, 2))
par(mar = c(3, 3, 3, 3))
clim_df <- extract(comb_stab, locs_list[[i]][, 2:3])
enm_df <- extract(enm_stab, locs_list[[i]][, 2:3])
maley_df <- extract(d2, locs_list[[i]][, 2:3])
###
# CALCULATE BINARY THRESHOLDS (CLIM/MALEY)
###
bin_df <-
cbind(
as.character(locs_list[[i]]$index),
#difference between past/present clim (absolute)
clim_df > summary(clim_df)[3],
#3 = median, #4 = mean, #5 = 3rd quant
enm_df,
# distance from refugia centroid
maley_df > summary(maley_df)[3] #2 = 1st quant, #3 = median, #4 = mean, #5 = 3rd quant
)
bin_list[[i]] <- bin_df
### convert to genlight
aa.genind <- vcfR2genind(vcfs[[i]])
if (i == 5) {
#podo_a has 3 inds with missing coords
aa.genind <- aa.genind[1:34]
}
distgenEUCL <-
dist(
aa.genind,
method = "euclidean",
diag = FALSE,
upper = FALSE,
p = 2
)
bin_df <- data.frame(bin_list[[i]])
colnames(bin_df) <- c("index", "clim", "enm", "maley")
strata(aa.genind) <- data.frame(bin_df[, 2])
names(strata(aa.genind)) <- "clim"
aa.genclone <- as.genclone(aa.genind)
#Data with mixed ploidy or ambiguous allele dosage cannot have within-individual variance calculated until the dosage is correctly estimated.
res_amova <- poppr.amova(aa.genclone, ~ clim)
list_amova[[i]] <- res_amova
res_amova_signif   <- randtest(res_amova, nrepet = 999)
plot(res_amova_signif, main = paste(names(vcfs)[i], "signif", sep = ""))
list_amova_signif[[i]] <- res_amova_signif
###
#randomized population structure
###
aa.genclone.new <- aa.genclone
new_df <-
data.frame(strata(aa.genclone)[sample(nInd(aa.genclone)), 1])
names(new_df) <- "clim"
strata(aa.genclone.new) <- new_df
aa.genclone.amova <- poppr.amova(aa.genclone.new, ~ clim)
list_rand_amova[[i]] <- aa.genclone.amova
aa.genclone.amova.test <-
randtest(aa.genclone.amova, nrepet = 999)
list_rand_amova_signif[[i]] <- aa.genclone.amova.test
plot(aa.genclone.amova.test,
main = paste(names(vcfs)[i], "random signif", sep = " "))
#dev.off()
}
dev.off()
for (p in 1:length(list_amova)) {
foo <-
cbind(list_amova[[p]]$componentsofcovariance,
rep(sp[p], 3),
list_amova_signif[[p]]$pvalue)
if (p == 1) {
res_cov <- foo
} else {
res_cov <- rbind(res_cov, foo)
}
}
res_cov_clim <- res_cov
colnames(res_cov_clim) <- c("sigma", "percentage", "sp", "p")
write.csv(res_cov_clim, "res_cov_clim.csv")
save.image("clim_refugia.Rdata")
#######################################
# enm-based refugia
#######################################
list_amova <- list()
list_amova_signif <- list()
list_rand_amova <- list()
list_rand_amova_signif <- list()
#check whether names of genind are in right order compared to location tables
par(mfrow = c(1, 3))
for (i in 1:length(vcfs)) {
pdf(paste(names(vcfs)[i], "_refugia_enm.pdf", sep = ""))
### convert to genlight
aa.genind <- vcfR2genind(vcfs[[i]])
if (i == 5) {
aa.genind <- aa.genind[1:34]
#podo_a has 3 inds with missing coords
list_amova[[i]]<-NA
list_amova_signif[[i]]<-NA
list_rand_amova[[i]]<-NA
list_rand_amova_signif[[i]]<-NA
} else {
clim_df <- extract(comb_stab, locs_list[[i]][, 2:3])
enm_df <- extract(enm_stab, locs_list[[i]][, 2:3])
maley_df <- extract(d2, locs_list[[i]][, 2:3])
###
# CALCULATE BINARY THRESHOLDS (CLIM/MALEY)
###
bin_df <-
cbind(
as.character(locs_list[[i]]$index),
#difference between past/present clim (absolute)
clim_df > summary(clim_df)[3],
#3 = median, #4 = mean, #5 = 3rd quant
enm_df,
# distance from refugia centroid
maley_df > summary(maley_df)[3] #2 = 1st quant, #3 = median, #4 = mean, #5 = 3rd quant
)
bin_list[[i]] <- bin_df
distgenEUCL <-
dist(
aa.genind,
method = "euclidean",
diag = FALSE,
upper = FALSE,
p = 2
)
bin_df <- data.frame(bin_list[[i]])
colnames(bin_df) <- c("index", "clim", "enm", "maley")
strata(aa.genind) <- data.frame(bin_df[, 3])
names(strata(aa.genind)) <- "enm"
aa.genclone <- as.genclone(aa.genind)
table(strata(aa.genclone, ~ enm))
#Data with mixed ploidy or ambiguous allele dosage cannot have within-individual variance calculated until the dosage is correctly estimated.
res_amova <- poppr.amova(aa.genclone, ~ enm)
list_amova[[i]] <- res_amova
res_amova_signif   <- randtest(res_amova, nrepet = 999)
plot(res_amova_signif, main = "list_amova_signif")
list_amova_signif[[i]] <- res_amova_signif
###
#randomized population structure
###
aa.genclone.new <- aa.genclone
new_df <-
data.frame(strata(aa.genclone)[sample(nInd(aa.genclone)), 1])
names(new_df) <- "enm"
strata(aa.genclone.new) <- new_df
aa.genclone.amova <- poppr.amova(aa.genclone.new, ~ enm)
list_rand_amova[[i]] <- aa.genclone.amova
aa.genclone.amova.test <-
randtest(aa.genclone.amova, nrepet = 999)
list_rand_amova_signif[[i]] <- aa.genclone.amova.test
plot(aa.genclone.amova.test, main = "list_rand_amova_signif")
}
dev.off()
}
for (p in c(1, 2, 3, 4, 6, 7)) {
foo <-
cbind(list_amova[[p]]$componentsofcovariance,
rep(sp[p], 3),
list_amova_signif[[p]]$pvalue)
if (p == 1) {
res_cov <- foo
} else {
res_cov <- rbind(res_cov, foo)
}
}
res_cov_enm <- res_cov
colnames(res_cov_enm) <- c("sigma", "percentage", "sp", "p")
write.csv(res_cov_enm, "res_cov_enm.csv")
save.image("enm_refugia.Rdata")
###
# maley-based refugia
###
list_amova <- list()
list_amova_signif <- list()
list_rand_amova <- list()
list_rand_amova_signif <- list()
#check whether names of genind are in right order compared to location tables
par(mfrow = c(1, 3))
for (i in 1:length(vcfs)) {
pdf(paste(names(vcfs)[i], "_refugia_maley.pdf", sep = ""))
clim_df <- extract(comb_stab, locs_list[[i]][, 2:3])
enm_df <- extract(enm_stab, locs_list[[i]][, 2:3])
maley_df <- extract(d2, locs_list[[i]][, 2:3])
###
# CALCULATE BINARY THRESHOLDS (CLIM/MALEY)
###
bin_df <-
cbind(
as.character(locs_list[[i]]$index),
#difference between past/present clim (absolute)
clim_df > summary(clim_df)[3],
#3 = median, #4 = mean, #5 = 3rd quant
enm_df,
# distance from refugia centroid
maley_df > summary(maley_df)[3] #2 = 1st quant, #3 = median, #4 = mean, #5 = 3rd quant
)
bin_list[[i]] <- bin_df
### convert to genlight
aa.genind <- vcfR2genind(vcfs[[i]])
if (i == 5) {
#podo_a has 3 inds with missing coords
aa.genind <- aa.genind[1:34]
}
distgenEUCL <-
dist(
aa.genind,
method = "euclidean",
diag = FALSE,
upper = FALSE,
p = 2
)
bin_df <- data.frame(bin_list[[i]])
colnames(bin_df) <- c("index", "clim", "enm", "maley")
strata(aa.genind) <- data.frame(bin_df[, 4])
names(strata(aa.genind)) <- "maley"
aa.genclone <- as.genclone(aa.genind)
#Data with mixed ploidy or ambiguous allele dosage cannot have within-individual variance calculated until the dosage is correctly estimated.
res_amova <- poppr.amova(aa.genclone, ~ maley)
list_amova[[i]] <- res_amova
res_amova_signif   <- randtest(res_amova, nrepet = 999)
plot(res_amova_signif, main = "list_amova_signif")
list_amova_signif[[i]] <- res_amova_signif
###
#randomized population structure
###
aa.genclone.new <- aa.genclone
new_df <-
data.frame(strata(aa.genclone)[sample(nInd(aa.genclone)), 1])
names(new_df) <- "maley"
strata(aa.genclone.new) <- new_df
aa.genclone.amova <- poppr.amova(aa.genclone.new, ~ maley)
list_rand_amova[[i]] <- aa.genclone.amova
aa.genclone.amova.test <-
randtest(aa.genclone.amova, nrepet = 999)
list_rand_amova_signif[[i]] <- aa.genclone.amova.test
plot(aa.genclone.amova.test, main = "list_rand_amova_signif")
}
dev.off()
for (p in 1:length(list_amova)) {
foo <-
cbind(list_amova[[p]]$componentsofcovariance,
rep(sp[p], 3),
list_amova_signif[[p]]$pvalue)
if (p == 1) {
res_cov <- foo
} else {
res_cov <- rbind(res_cov, foo)
}
}
res_cov_maley <- res_cov
colnames(res_cov_maley) <- c("sigma", "percentage", "sp", "p")
write.csv(res_cov_maley, "res_cov_maley.csv")
save.image("maley_refugia.Rdata")
###############################
# GROUPED BARPLOT
###############################
bet_clim <- res_cov_clim[grep("Between", rownames(res_cov_clim)), ]
bet_enm <- res_cov_enm[grep("Between", rownames(res_cov_enm)), ]
bet_enm$sp<-as.character(bet_enm$sp)
bet_enm<-rbind(bet_enm[c(1:4), ], c(0,0,"podoa",1), bet_enm[c(5:6), ])
bet_enm$sp<-as.factor(bet_enm$sp)
bet_enm$percentage<-as.numeric(bet_enm$percentage)
bet_enm$p<-as.numeric(bet_enm$p)
bet_enm$sigma<-as.numeric(bet_enm$sigma)
bet_maley <- res_cov_maley[grep("Between", rownames(res_cov_maley)), ]
bet <- rbind(bet_clim, bet_enm, bet_maley)
ref_type <- c(rep("clim", length(bet_clim$sigma)),
rep("enm", length(bet_enm$sigma)),
rep("maley", length(bet_maley$sigma)))
ref_type_bet <- cbind(ref_type, bet)
# library
library(ggplot2)
# Grouped
ggplot(ref_type_bet, aes(fill = sp, y = percentage, x = ref_type)) +
geom_bar(position = "dodge", stat = "identity") + xlab("Model type")  + ylab("% variance explained by refugia")
